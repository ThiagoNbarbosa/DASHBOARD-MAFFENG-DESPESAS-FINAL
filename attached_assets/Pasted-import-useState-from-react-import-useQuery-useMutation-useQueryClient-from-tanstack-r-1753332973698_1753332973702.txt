import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Trash2, Filter, X, Ban, Eye, Edit } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { authApi } from "@/lib/auth";
import { formatDateSafely } from "@/lib/date-utils";

import type { Expense } from "@shared/schema";
import { BANCOS, FORMAS_PAGAMENTO } from "@shared/constants";
import { useContractsAndCategories } from "@/hooks/use-contracts-categories";
import EditExpenseModal from "./edit-expense-modal";

interface ExpenseFilters {
  year: string;
  month: string;
  category: string;
  contractNumber: string;
  paymentMethod: string;
  startDate: string;
  endDate: string;
}

export default function ExpenseTable() {
  const [filters, setFilters] = useState<ExpenseFilters>({
    year: "all",
    month: "all",
    category: "all",
    contractNumber: "",
    paymentMethod: "all",
    startDate: "",
    endDate: "",
  });
  const [selectedExpense, setSelectedExpense] = useState<Expense | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);

  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: user } = useQuery({
    queryKey: ['/api/auth/me'],
    queryFn: authApi.getCurrentUser,
  });

  const { data: contractsCategories } = useContractsAndCategories();
  const contracts = contractsCategories?.contracts || [];
  const categories = contractsCategories?.categories || [];

  // Query para buscar dados do usuário da despesa selecionada
  const { data: expenseUser } = useQuery({
    queryKey: ['/api/users', selectedExpense?.userId],
    queryFn: async () => {
      if (!selectedExpense?.userId) return null;
      try {
        return await apiRequest(`/api/users/${selectedExpense.userId}`, 'GET');
      } catch (error) {
        return { name: 'Usuário não encontrado' };
      }
    },
    enabled: !!selectedExpense?.userId,
  });

  // Função para abrir modal de detalhes
  const handleViewDetails = (expense: Expense) => {
    setSelectedExpense(expense);
