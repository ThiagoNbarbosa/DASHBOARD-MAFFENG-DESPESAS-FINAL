**🎯 PROMPT DIRETIVO PARA EXECUÇÃO NO REPLIT AGENT: PLANO DE AÇÃO MAFFENG DASHBOARD**

---

**📍 CONTEXTO GERAL**
O sistema MAFFENG é um painel de gestão de despesas já funcional, com arquitetura baseada em React + Supabase, responsividade mobile, autenticação por sessão, filtros e relatórios. Identificamos pendências e funcionalidades ausentes que serão tratadas em três fases: Correções Críticas, Melhorias Imediatas e Expansão.

---

### ✅ FASE 1 - CORREÇÕES CRÍTICAS (Prioridade Máxima)

1. **Corrigir Erro 401 na Autenticação:**
   - Verifique se o `access_token` está sendo salvo corretamente no `localStorage` ou `cookies`
   - Confirme se o Supabase está com persistência de sessão habilitada (`persistSession: true`)
   - Teste o `supabase.auth.getSession()` após recarregar a página
   - Implemente `supabase.auth.onAuthStateChange()` para restaurar sessão automaticamente
   - Verifique se algum `middleware` do Vite está bloqueando os headers de autorização

2. **Limpeza de Arquivos de Debug:**
   - Remova todos os arquivos cookies_*.txt da raiz do projeto
   - Apague arquivos temporários, mock folders e "attached_assets" obsoletos

3. **Atualizar Dependências:**
   - Rode `npx update-browserslist-db@latest`
   - Atualize pacotes desatualizados com `npm outdated` e `npm update`

---

### 🛠 FASE 2 - MELHORIAS IMEDIATAS (2 Semanas)

1. **Implementar Página "Minha Conta":**
   - Criar `client/src/pages/minha-conta.tsx`
   - Campos: nome, email, foto, alteração de senha (opcional), preferências de notificação
   - Rota: `/minha-conta`
   - Reutilize o sistema de roles e hooks de `useUser`

2. **Melhorar Sistema de Erros Globais:**
   - Centralizar erros usando `ErrorBoundary`
   - Criar componente `GlobalErrorSnackbar` com mensagens amigáveis
   - Adicionar retry automático para `fetch` e `mutations` com falha

---

### 🚀 FASE 3 - EXPANSÃO (1 Mês)

1. **Sistema de Notificações:**
   - Criar contexto de notificações com React Context
   - Adicionar alertas de vencimento para despesas/receitas
   - Planejar push notifications no futuro (via Supabase Edge Functions)

2. **Analytics Avançado:**
   - Adicionar projeções futuras e metas
   - Criar comparação entre períodos (ex: mes atual vs anterior)
   - Utilizar novo componente: `TrendsComparisonGraph`

---

### 📁 ORGANIZAÇÃO E DOCUMENTAÇÃO

- Criar ou revisar os seguintes arquivos na raiz do projeto:
   - `README.md`: instruções de instalação e uso
   - `CHANGELOG.md`: registrar atualizações e hotfixes
   - `TROUBLESHOOTING.md`: guia de erros comuns e soluções
   - `DEPLOY.md`: passo a passo de publicação no ambiente atual

---

### 🏷 VERSIONAMENTO

- Versão atual: **v2.0.0**
- Após cada fase:
   - `v2.0.1`: Correção de autenticação
   - `v2.1.0`: Página de perfil
   - `v2.2.0`: Sistema de notificações
   - `v3.0.0`: Analytics avançado

---

### ✅ CHECK FINAL: TESTES EM TODOS OS FLUXOS
- Login
- Dashboard
- CRUD de despesas e faturamento
- Upload e relatórios
- Cálculo de lucro e filtros

---

**Executar cada etapa com commits organizados e comentados. Seguir esse roadmap rigorosamente.**

**MANTER CONTATO ATIVO COM O TIME DE DESIGN E PRODUTO EM CADA MUDANÇA SIGNIFICATIVA.**