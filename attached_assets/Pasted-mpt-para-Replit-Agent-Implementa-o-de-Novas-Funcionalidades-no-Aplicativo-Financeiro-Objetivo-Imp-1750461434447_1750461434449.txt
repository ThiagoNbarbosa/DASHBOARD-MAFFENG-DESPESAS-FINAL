mpt para Replit Agent: Implementação de Novas Funcionalidades no Aplicativo Financeiro
Objetivo: Implementar as funcionalidades de "Faturamento" e "Despesas por Contrato" no aplicativo financeiro, garantindo a integridade das funcionalidades existentes. O layout e o estilo devem ser consistentes com o design atual do aplicativo.
Contexto: O aplicativo é uma dashboard financeira com funcionalidades de login, registro de despesas, visualização de despesas recentes e resultados (gráficos). A estrutura é baseada em React (frontend em client/src) e um backend em server/.


Parte 1: Funcionalidade "Faturamento"
1.1. Adicionar "Faturamento" ao Menu Lateral
Instrução: Localize o arquivo client/src/components/sidebar.tsx. Adicione um novo item de menu com o texto "Faturamento" e um ícone apropriado (se houver). Este item deve navegar para a rota /faturamento.
•Ação: Insira um novo elemento de navegação (provavelmente um <button> ou <a> dentro de um <li> se for uma lista) que, ao ser clicado, navegue para a rota /faturamento. Mantenha o estilo e a estrutura dos itens de menu existentes. Se houver um componente de ícone, use um ícone relevante ou um placeholder.
•Exemplo de modificação em client/src/components/sidebar.tsx (adapte conforme o código existente):
1.2. Criar a Página de Faturamento
Instrução: Crie um novo componente de página para a funcionalidade de faturamento. Esta página deve ter um layout semelhante ao das páginas "dashboard".
•Localização Sugerida: client/src/pages/Faturamento.tsx.
•Ação:
•Crie o arquivo Faturamento.tsx.
•Implemente a estrutura básica da página, incluindo um cabeçalho com o título "Faturamento".
•Adicione uma área de conteúdo principal. Para a primeira versão, exiba uma mensagem como "Funcionalidade de Faturamento em desenvolvimento." ou dados mockados para demonstrar o layout.
•Exemplo de Estrutura para client/src/pages/Faturamento.tsx:
1.3. Configurar Roteamento para Faturamento
Instrução: Adicione a nova rota para a página de Faturamento no arquivo de roteamento principal do aplicativo.
•Localização Provável: client/src/App.tsx ou um arquivo de roteamento dedicado (verifique client/src/main.tsx ou client/src/App.tsx para a configuração do react-router-dom).
•Ação: Importe o componente Faturamento e adicione uma nova rota para ele, associando-o ao caminho /faturamento.
•Exemplo de modificação em client/src/App.tsx (assumindo react-router-dom):


Parte 2: Campo "Despesas por Contrato" na Aba "Resultados"
2.1. Adicionar Visualização de Despesas por Contrato na Página de Resultados
Instrução: No arquivo client/src/pages/results.tsx, adicione um novo componente ou seção que exiba as despesas agrupadas por número de contrato. Este componente deve ser colocado no espaço em branco inferior da página.
•Ação:
•Crie um novo componente (ex: client/src/components/ExpensesByContract.tsx) que será responsável por buscar e exibir os dados.
•Integre este novo componente na página client/src/pages/results.tsx.
•Considerações sobre Dados:
•Para a implementação inicial, o componente ExpensesByContract.tsx pode exibir dados mockados ou uma mensagem como "Gráfico de Despesas por Contrato (dados em desenvolvimento)" até que a integração com o backend seja completa. O ideal seria um novo endpoint no backend (server/) para fornecer esses dados.
•Exemplo de Estrutura para client/src/components/ExpensesByContract.tsx:
•Exemplo de modificação em client/src/pages/results.tsx:


Orientações Gerais para o Agente
•Preservar Funcionalidades Existentes: Assegure-se de que nenhuma alteração quebre as funcionalidades de login, registro de despesas, visualização de despesas recentes e resultados (gráficos) que já estão funcionando.
•Consistência de Estilo: Mantenha o estilo visual e a experiência do usuário consistentes com o restante do aplicativo. Utilize os componentes de UI existentes (client/src/components/ui) sempre que possível.
•Comentários no Código: Adicione comentários claros no código para explicar as novas seções e modificações.
•Testes: Após a implementação, execute testes básicos para garantir que as novas funcionalidades estão operacionais e que as antigas não foram afetadas.
•Feedback: Se houver alguma ambiguidade ou necessidade de decisão, o agente deve buscar esclarecimentos.